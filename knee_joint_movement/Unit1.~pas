unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs, opengl,
  ExtCtrls, StdCtrls, TeEngine, Series, TeeProcs, Chart, Spin;

type
  TForm1 = class(TForm)
    Timer1: TTimer;
    Timer2: TTimer;
    close1: TButton;
    Button1: TButton;
    SpinEdit1: TSpinEdit;
    SpinEdit2: TSpinEdit;
    Chart1: TChart;
    Series1: TLineSeries;
    Series2: TLineSeries;
    SpinEdit3: TSpinEdit;
    RadioButton1: TRadioButton;
    RadioButton2: TRadioButton;
    RadioButton3: TRadioButton;
    Button2: TButton;
    Button3: TButton;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure Timer2Timer(Sender: TObject);
    procedure ScrollBar2Change(Sender: TObject);
    procedure ScrollBar3Change(Sender: TObject);
    procedure close1Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure SpinEdit1Change(Sender: TObject);
    procedure SpinEdit2Change(Sender: TObject);
    procedure SpinEdit3Change(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
  private
    { Private-Deklarationen }
   myDC : HDC;
   myRC : HGLRC;
   myPalette : HPALETTE;
   procedure SetupPixelFormat;
  public
    { Public-Deklarationen }
  end;

const
mat_specular : array [0..3] of GLfloat = ( 8.0, 8.0, 1.0, 0.0 );
mat_shininess : GLfloat = 40.0;
light_position : array [0..3] of GLfloat = ( 120.6, 14.0, 41.0, 10.7 );


f0=1.0;
f1=0.5;
f2=0.5;
f3=0.5;


var
  Form1: TForm1;
  rotangle,rotangle1,rotangle2,rotangle3:real;
  xpos,ypos,zpos:real;
  circlepoint:integer;
  yaw,pitch,roll : integer;
  time,theta, phi,phidot,thetadot : extended;
  angle:real;
  Sphere,cylinder,disk,partialdisk: GLUquadricObj;
implementation

{$R *.DFM}
procedure glBindTexture(target: GLenum; texture: GLuint); stdcall; external opengl32;
procedure TForm1.SetupPixelFormat;
var    hHeap: THandle;
  nColors, i: Integer;
  lpPalette : PLogPalette;
  byRedMask, byGreenMask, byBlueMask: Byte;
  nPixelFormat: Integer;
  pfd: TPixelFormatDescriptor;
begin
  FillChar(pfd, SizeOf(pfd), 0);
  with pfd do begin
    nSize     := sizeof(pfd);               // Länge der pfd-Struktur
    nVersion  := 1;                         // Version
    dwFlags   := PFD_DRAW_TO_WINDOW or PFD_SUPPORT_OPENGL or
                 PFD_DOUBLEBUFFER;          // Flags
    iPixelType:= PFD_TYPE_RGBA;             // RGBA Pixel Type
    cColorBits:= 32;                        // 24-bit color
    cDepthBits:= 32;                        // 32-bit depth buffer
    iLayerType:= PFD_MAIN_PLANE;            // Layer Type
  end;
  nPixelFormat:= ChoosePixelFormat(myDC, @pfd);
  SetPixelFormat(myDC, nPixelFormat, @pfd);
                                            // Farbpalettenoptimierung wenn erforderlich
  DescribePixelFormat(myDC, nPixelFormat,
                      sizeof(TPixelFormatDescriptor),pfd);
  if ((pfd.dwFlags and PFD_NEED_PALETTE) <> 0) then begin
    nColors  := 1 shl pfd.cColorBits;
    hHeap    := GetProcessHeap;
    lpPalette:= HeapAlloc
       (hHeap,0,sizeof(TLogPalette)+(nColors*sizeof(TPaletteEntry)));
    lpPalette^.palVersion := $300;
    lpPalette^.palNumEntries := nColors;
    byRedMask  := (1 shl pfd.cRedBits) - 1;
    byGreenMask:= (1 shl pfd.cGreenBits) - 1;
    byBlueMask := (1 shl pfd.cBlueBits) - 1;
   for i := 0 to nColors - 1 do begin
      lpPalette^.palPalEntry[i].peRed  :=
        (((i shr pfd.cRedShift)  and byRedMask)  *255)DIV byRedMask;
      lpPalette^.palPalEntry[i].peGreen:=
        (((i shr pfd.cGreenShift)and byGreenMask)*255)DIV byGreenMask;
      lpPalette^.palPalEntry[i].peBlue :=
        (((i shr pfd.cBlueShift) and byBlueMask) *255)DIV byBlueMask;
      lpPalette^.palPalEntry[i].peFlags:= 0;
    end;
    myPalette:= CreatePalette(lpPalette^);
    HeapFree(hHeap, 0, lpPalette);
    if (myPalette <> 0) then begin
      SelectPalette(myDC, myPalette, False);
      RealizePalette(myDC);
    end;
  end;
end;

procedure render;
var
  panjang,panjang1,tp,tl,tt,jarip,jarip1,jarip2,jarispace:real;
begin

 glClearColor(0.0, 0.0, 0.0, 1.0);
 glClear(GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT); //Farb und Tiefenpuffer löschen
 glLoadIdentity;
 glenable(gl_lighting);
 gltranslate(xpos,ypos,zpos);
 glrotate(pitch,0,0,1); //pitch angle sudut dongak  pooros sb z
 glrotate(yaw,0,1,0); //yaw heading angle, poros sumbu y, kiri kanan
 glrotate(roll,1,0,0); //roll angle sudut memutar, sumbu x
 panjang:=4;
 panjang1:=3;
 tp:=1.25;
 tl:=0.5;
 tt:=0.175;
 glrotate(90,1,0,0); //to result pendulum in sagittal plane, z axis rotated around x axis
 //upper arm rotation
  glrotate(rotangle,0,1,0);//sagittal plane xy  around y alias z
 glrotate(rotangle,1,0,0);//frontal plane xy around x axis

  glpushmatrix();
  gluSphere(sphere,1.0,32 ,32 );  //joint 1 center
  gluCylinder(cylinder, 0.65, 0.35, panjang, 32, 32); // upper arm long cylinder
  gltranslate(0,0,panjang);
  gluSphere(sphere,0.5,32 ,32 );//joint 2 center

 //lower arm rotation
   glrotate(1.5*rotangle,1,0,0); // lower arm rotation around x axis yz frontal plane
   glpushmatrix();
   gluCylinder(cylinder, 0.35, 0.35, panjang1, 32, 32); // lower arm long cylinder
   gltranslate(0,0,panjang1);
   //joint#3 wrist joint
   glrotate(rotangle,1,0,0);
   gluSphere(sphere,0.4,32 ,32 );//joint 3 center wrist joint
   glpushmatrix();
   gluCylinder(cylinder, 0.55, 0.55, 0.75, 32, 32); // hand segment
   gltranslate(0,0,0.75);
   glusphere(sphere,0.55,32,32);
   glpopmatrix();
swapBuffers(form1.myDC);
end;



procedure render1;
var
  panjang,panjang1,tp,tl,tt,jarip,jarip1,jarip2,jarispace:real;
begin

 glClearColor(0.0, 0.0, 0.0, 1.0);
 glClear(GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT); //Farb und Tiefenpuffer löschen
 glLoadIdentity;
 glenable(gl_lighting);
 gltranslate(xpos,ypos,zpos);
 glrotate(pitch,0,0,1); //pitch angle sudut dongak  pooros sb z
 glrotate(yaw,0,1,0); //yaw heading angle, poros sumbu y, kiri kanan
 glrotate(roll,1,0,0); //roll angle sudut memutar, sumbu x


 panjang:=4;
 panjang1:=3;
 tp:=1.25;
 tl:=0.5;
 tt:=0.175;

  glrotate(90,1,0,0); //putaran + ccw, to result pendulum in sagittal plane, z axis rotated around x axis

  glrotate(rotangle,0,1,0);//sagittal plane xy  around y alias z
  glrotate(rotangle,1,0,0);//frontal plane xy round x axis

  gluSphere(sphere,1.0,32 ,32 );  //joint 1 center
  gluCylinder(cylinder, 0.65, 0.35, panjang/2, 32, 32); // lengan 1 origibally 3 axis will be in z, long cylinder
 glpushmatrix();//menyimpan koordinat sebelum dipindah ke ujung silinder
   gltranslate(0,0,panjang/2); //pindahkan ke ujung cylinder  panjang/2 originally in z axis..rotated 90 on x axis will be in sagitaal plane xz

   gluSphere(sphere,1.0,32 ,32 );  //joint 1 center
  glrotate(90,0,1,0);// rotasikan 1 lengan
   glucylinder(cylinder,0.65,0.65,panjang/2,32,32); //buat lengan 2
   gltranslate(0,0,panjang/2);//pindahkan ke ujung silinder pusat koordinat
   glusphere(sphere,1.0,32,32);//buat bulatan di ujuang silinder

 glpopmatrix(); //mengambil kembali koordinat asal

   glpushmatrix();//pushmatrix sebelum rotate, bila hanya lengan 3 yang rotasi
  glrotate(rotangle1,0,1,0); //rotasikan lengan 3 berikut
  gluCylinder(cylinder, 0.65, 0.35, panjang, 32, 32); //  lengan 3origibally 3 axis will be in z, long cylinder
 // glpushmatrix();//push matrix sesudah rotate, bila efek rotasi juga ke lengan berikut saat di pop
 //pindahkan pusat koordinat ke ujung lengan
  gltranslate(0,0,panjang);
  glusphere(sphere,1.0,32,32);//buat bulatan di ujuang silinder
 glpopmatrix();  //kembalikan ke pusat koordinat
 glpushmatrix();//simpan koordinat awal sebelum rotasi
  glrotate(-120,0,1,0);//buat lengan 4 dengan sudut -90 thd sumbu pada bidang sagittal

   gluCylinder(cylinder, 0.65, 0.35, panjang, 32, 32); //  lengan 3origibally 3 axis will be in z, long cylinder

  gltranslate(0,0,panjang);
  glusphere(sphere,1,32,32);//buat bulatan pada ujung lengan
 glpopmatrix();//ambil kembali koordinat asal
 glpushmatrix();//simpan agar transformasi tidak mempengaruhi lengan selanjutnya
  glrotate(-270,0,1,0);
  gluCylinder(cylinder, 0.65, 0.35, panjang, 32, 32); //  lengan 3origibally 3 axis will be in z, long cylinder
  gltranslate(0,0,panjang);
  glusphere(sphere,1,32,32);



 glpopmatrix();


swapBuffers(form1.myDC);
end;


procedure render2;
begin
 glClearColor(0.0, 0.0, 0.0, 1.0);
 glClear(GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT); //Farb und Tiefenpuffer löschen
 glLoadIdentity;
 glenable(gl_lighting);
 gltranslate(xpos,ypos,zpos);
 glrotate(pitch,0,0,1); //pitch angle sudut dongak  pooros sb z
 glrotate(yaw,0,1,0); //yaw heading angle, poros sumbu y, kiri kanan
 glrotate(roll,1,0,0); //roll angle sudut memutar, sumbu x
// glrotate(90,1,0,0);

 glrotate(rotangle,0,0,1);
 glucylinder(cylinder,0.5,0.5,2.5,32,32);
 gludisk(disk,0,0.5,12,32);
 glupartialdisk(partialdisk,0.5,0.75,12,32,0,30);
 glupartialdisk(partialdisk,0.5,0.75,12,32,60,30);
 glupartialdisk(partialdisk,0.5,0.75,12,32,120,30);
 glupartialdisk(partialdisk,0.5,0.75,12,32,180,30);
 glupartialdisk(partialdisk,0.5,0.75,12,32,240,30);
 glupartialdisk(partialdisk,0.5,0.75,12,32,300,30);
 glpushmatrix();
 gltranslate(0,0,2.5);
 gludisk(disk,0,0.5,12,32);
 glupartialdisk(partialdisk,0.5,0.75,12,32,0,30);
 glupartialdisk(partialdisk,0.5,0.75,12,32,60,30);
 glupartialdisk(partialdisk,0.5,0.75,12,32,120,30);
 glupartialdisk(partialdisk,0.5,0.75,12,32,180,30);
 glupartialdisk(partialdisk,0.5,0.75,12,32,240,30);
 glupartialdisk(partialdisk,0.5,0.75,12,32,300,30);

 glpopmatrix();
  swapBuffers(form1.myDC);
end;


procedure TForm1.SpinEdit1Change(Sender: TObject);
begin
 pitch:=spinedit1.value;
end;

procedure TForm1.SpinEdit2Change(Sender: TObject);
begin
 yaw:=spinedit2.Value;
end;

procedure TForm1.SpinEdit3Change(Sender: TObject);
begin
 roll:=spinedit3.value;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
theta:=30*pi/180;
phi:=20*pi/180;
thetadot:=0;
phidot:=0;

form1.myDC:= GetDC(Handle);
SetupPixelFormat;
myRC:= wglCreateContext(myDC);
wglMakeCurrent(myDC, myRC);
glEnable(GL_DEPTH_TEST);
glLoadIdentity;

glClearColor(0.0, 0.0, 0.0, 1.0); // Black Background
glShadeModel(GL_SMOOTH); // Enables Smooth Color Shading
glClearDepth(1.0); // Depth Buffer Setup
glEnable(GL_DEPTH_TEST); // Enable Depth Buffer
glDepthFunc(GL_LESS); // The Type Of Depth Test To Do

glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);

glEnable(GL_TEXTURE_2D);

Sphere := gluNewQuadric();
cylinder:= gluNewQuadric();
disk:=glunewquadric();
partialdisk:=glunewquadric();
gluQuadricNormals(Sphere, GLU_SMOOTH); // Create Smooth Normals
gluQuadricNormals(cylinder, GLU_SMOOTH); // Create Smooth Normals
gluQuadricNormals(disk, GLU_SMOOTH); // Create Smooth Normals

glMaterialfv(GL_FRONT, GL_SPECULAR, @mat_specular);
glMaterialfv(GL_BACK, GL_SPECULAR, @mat_specular);
glMaterialfv(GL_FRONT, GL_SHININESS, @mat_shininess);
glMaterialfv(GL_BACK, GL_SHININESS, @mat_shininess);
glLightfv(GL_LIGHT0, GL_POSITION, @light_position);
glLightfv(GL_LIGHT3, GL_SPECULAR, @mat_specular);
glLightfv(GL_LIGHT1, GL_POSITION, @light_position);
glLightfv(GL_LIGHT2, GL_POSITION, @light_position);

glEnable(GL_LIGHTING);
glEnable(GL_LIGHT0);
glEnable(GL_LIGHT1);
glEnable(GL_LIGHT2);
glEnable(GL_LIGHT3);
glDepthFunc(GL_LEQUAL);

rotangle:=0;
rotangle1:=0;
rotangle2:=0;
rotangle3:=0;
xpos:=-5;
ypos:=0;
zpos:=-10;
end;

procedure TForm1.FormDestroy(Sender: TObject);
begin
wglmakecurrent(0,0);
wgldeletecontext(mydc);
releasedc(handle,mydc);
end;

procedure TForm1.FormResize(Sender: TObject);
begin
glViewport(0, 0, Width, Height);    // Setzt den Viewport für das OpenGL Fenster
glMatrixMode(GL_PROJECTION);        // Matrix Mode auf Projection setzen
glLoadIdentity();                   // Reset View
gluPerspective(45.0, Width/Height, 1, 100.0);  // Perspektive den neuen Maßen anpassen.
glMatrixMode(GL_MODELVIEW);         // Zurück zur Modelview Matrix
glLoadIdentity();
end;

procedure TForm1.Timer1Timer(Sender: TObject);
begin
 if radiobutton1.Checked then   //upper limb radiobutton1
 render else                                  //twoupper radio button 2
 if radiobutton2.Checked then
 render1 else           //ct1 rad 3
 if radiobutton3.Checked then
 render2;
 time:= time +0.01;
end;


procedure TForm1.Timer2Timer(Sender: TObject);
begin

   rotangle1:=90*sin(2*pi*f0*time);
   rotangle:=90*abs(sin(2*pi*f1*time));
   rotangle3:=180*abs(sin(2*pi*f2*time));

   rotangle2:=90*abs(sin(0.1*time));
   series1.addxy(time,rotangle);
   series2.addxy(time,rotangle3);
   xpos:= xpos+0.005*cos(rotangle*pi/180);

end;



procedure TForm1.ScrollBar2Change(Sender: TObject);
begin
  xpos:=-5;
end;

procedure TForm1.ScrollBar3Change(Sender: TObject);
begin
  ypos:=-2;
end;



procedure TForm1.close1Click(Sender: TObject);
begin
  close;
end;

procedure TForm1.Button1Click(Sender: TObject);
begin
 series1.Clear;
 series2.clear;
 render;

 timer1.Enabled:=true;
 timer2.enabled:=true;

end;

procedure TForm1.Button2Click(Sender: TObject);
begin
 series1.Clear;
 series2.clear;
 render1;

 timer1.Enabled:=true;
 timer2.enabled:=true;

end;

procedure TForm1.Button3Click(Sender: TObject);
begin
 series1.Clear;
 series2.clear;
 render2;

 timer1.Enabled:=true;
 timer2.enabled:=true;

end;



end.
