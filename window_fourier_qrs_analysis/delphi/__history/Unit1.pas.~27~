unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, VclTee.TeeGDIPlus, Vcl.StdCtrls,
  VCLTee.TeEngine, VCLTee.Series, Vcl.ExtCtrls, VCLTee.TeeProcs,
  VCLTee.Chart, dspinterface, math, VCLTee.TeeTools;

type
  arraybaru = array[-9999..9999] of real;

  TForm1 = class(TForm)
    Chart1: TChart;
    Button1: TButton;
    OpenDialog1: TOpenDialog;
    ListBox1: TListBox;
    GroupBox1: TGroupBox;
    Chart2: TChart;
    Series2: TLineSeries;
    Series3: TLineSeries;
    Series4: TLineSeries;
    Series5: TLineSeries;
    Series6: TLineSeries;
    Chart3: TChart;
    Series7: TLineSeries;
    GroupBox2: TGroupBox;
    Chart4: TChart;
    Chart5: TChart;
    LineSeries1: TLineSeries;
    GroupBox3: TGroupBox;
    Edit1: TEdit;
    Edit2: TEdit;
    Edit3: TEdit;
    Edit4: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    GroupBox5: TGroupBox;
    DFTRB: TRadioButton;
    FFTRB: TRadioButton;
    GroupBox6: TGroupBox;
    NoWindowRB: TRadioButton;
    HanningRB: TRadioButton;
    HammingRB: TRadioButton;
    GroupBox7: TGroupBox;
    ManualRB: TRadioButton;
    FileRB: TRadioButton;
    Label7: TLabel;
    Label10: TLabel;
    Detection: TGroupBox;
    Button2: TButton;
    Button5: TButton;
    Edit5: TEdit;
    Edit6: TEdit;
    Label8: TLabel;
    Label9: TLabel;
    GroupBox9: TGroupBox;
    Label5: TLabel;
    Label6: TLabel;
    ScrollBar1: TScrollBar;
    ScrollBar2: TScrollBar;
    Button3: TButton;
    Button4: TButton;
    WindowChart: TLineSeries;
    Series8: TBarSeries;
    RpeakChart: TPointSeries;
    Series1: TLineSeries;
    GridBandTool1: TGridBandTool;
    GridBandTool2: TGridBandTool;
    Button6: TButton;
    Button7: TButton;
    procedure inputsinus;
    procedure inputecg(nm_file : string);
    procedure filterecg(x:arraybaru);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure prosesdft(inp: vektor; data: integer; fsd: extended);
    procedure prosesfft(inp: vektor; data: integer; fsd: extended);
    procedure prosesidft(data: integer; re1, im2: vektor; fsd: extended);
    procedure prosesifft(data: integer; re1, im2: vektor; fsd: extended);
    procedure hanning(data: integer; inp: vektor);
    procedure hamming(data: integer; inp: vektor);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure ScrollBar1Change(Sender: TObject);
    procedure ScrollBar2Change(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure Button7Click(Sender: TObject);

  private
    { Private declarations }
  public
    { Public declarations }

    jmldataecg : integer;
    sampleecg, xecgfilter, outlpf, outhpf, outddt, outsqr, th, outp : arraybaru;
    fsecg : extended;
    mag2, xecg : vektor;
    datazp : integer;
  end;

var
  Form1: TForm1;

  filename : textfile;
  t, max, maxn, bpm : extended;

  y1, y2, ybackward, yforward : arraybaru;
  s1 : tstringlist;
  jmldata, i, j, ordemav, tt, jum : integer;
  amp, freq, fssinus : extended;

  k, n: integer;
  a1, f1, a2, f2, mean, stdev: extended;
  t2, t3, fs: extended;

  filename1, filename2, filename3:textfile;
  sinus, xsin, w, whan, wham, whan1, wham1, wham11, whan11: vektor;
  sl, sl1, sl2, sl3: tstringlist;
  re, im, mag, mag1, hasilidft, re2, im2, lp, ln : vektor;
  hasilfft, hasilifft, hasildft: matrik;
  index, dat1, sh, sh2, sc, sc2: integer;
  cek: vektor;

implementation

{$R *.dfm}

uses Unit2, Unit3;

{ TForm1 }

//SET/IMPORT DATA
procedure TForm1.Button1Click(Sender: TObject);
begin
  series1.Clear;

  if ManualRB.Checked = true then
  begin
    inputsinus;
    series1.Title := 'Sinus';
  end;
  if FileRB.Checked = true then
  begin
    if opendialog1.Execute = true then
    begin
      inputecg(opendialog1.FileName);
      for i := 0 to (jmldataecg-1) do
        begin
          series1.AddXY(i, xecgfilter[i]);
        end;
    series1.Title := 'ECG';
    end;
  end;
end;

//QRS DETECTOR
procedure TForm1.Button2Click(Sender: TObject);
begin
  filterecg(xecgfilter);
end;

//SPECTRUM DFT/FFT/IDVT/IFFT
procedure TForm1.Button3Click(Sender: TObject);
var
  dt : integer;
begin
  if manualrb.Checked = true then   //MANUAL DFT/FFT
  begin
    if dftrb.Checked = true then
    begin

      if hanningrb.Checked = true then
      begin
        hanning(jmldata,xsin);
        prosesdft(whan, jmldata, fssinus);
      end;

      if hammingrb.Checked = true then
      begin
        hamming(dt,xsin);
        prosesdft(wham, jmldata, fssinus);
      end;

      if nowindowrb.Checked = true then
      begin
        prosesdft(xsin, jmldata, fssinus);
      end;

    end;

    if fftrb.Checked = true then
    begin

      if hanningrb.Checked = true then
      begin
        hanning(jmldata,xsin);
        prosesfft(whan, jmldata, fssinus);
      end;

      if hammingrb.Checked = true then
      begin
        hamming(jmldata, xsin);
        prosesfft(whan, jmldata, fssinus);
      end;

      if nowindowrb.Checked = true then
      begin
        prosesfft(xsin, jmldata, fssinus);
      end;
    end;
  end;

  if filerb.Checked = true then     //OPENFILE DFT/FFT
  begin
     if dftrb.Checked = true then
     begin

        if hanningrb.Checked = true then
         begin
         hanning(jmldataecg, xecg);
         prosesdft(whan, jmldataecg, fsecg);
        end;

        if hammingrb.Checked = true then
        begin
         hamming(jmldataecg, xecg);
         prosesdft(wham, jmldataecg, fsecg);
        end;

        if nowindowrb.Checked = true  then
        begin
          prosesdft(xecg,jmldataecg, fsecg);
        end;

     end;

     if fftrb.Checked = true then
      begin

        if hanningrb.Checked = true then
        begin
        hanning(jmldataecg, xecg);
        prosesfft(whan, jmldataecg, fsecg);
        end;

        if hammingrb.Checked = true then
        begin
         hamming(jmldataecg, xecg);
         prosesfft(wham, jmldataecg, fsecg);
        end;

        if nowindowrb.Checked = true  then
        begin
          prosesfft(xecg,jmldataecg, fsecg);
        end;

      end;
  end;
end;

//INVERSE DFT/FFT/IDVT/IFFT
procedure TForm1.Button4Click(Sender: TObject);
begin
  if manualrb.Checked = true then      //MANUAL IDFT / IFFT
  begin
    if dftrb.Checked = true then  //IDFT
    begin

      if hanningrb.Checked = true then
      begin
        prosesidft(jmldata,re,im,fs);
      end;

      if hammingrb.Checked = true then
      begin
        prosesidft(jmldata,re,im,fs);
      end;

      if nowindowrb.Checked = true then
      begin
        prosesidft(jmldata,re,im,fs);
      end;

    end;

    if fftrb.Checked =true then   //IFFT
    begin

      if hanningrb.Checked = true then
      begin
        prosesifft(jmldata,re2,im2,fs);
      end;

      if hammingrb.Checked = true then
      begin
        prosesifft(jmldata,re2,im2,fs);
      end;

      if nowindowrb.Checked = true then
      begin
        prosesifft(jmldata,re2,im2,fs);
      end;

    end;
  end;
  if filerb.Checked = True then
  begin
    if dftrb.Checked = True then
    begin

      if hanningrb.Checked = true then
      begin
        prosesidft(jmldataecg,re,im,fsecg);
      end;

      if hammingrb.Checked = true then
      begin
        prosesidft(jmldataecg,re,im,fsecg);
      end;

      if nowindowrb.Checked = true then
      begin
        prosesidft(jmldataecg,re,im,fsecg);
      end;
    end;

    if fftrb.Checked = true then
    begin
      if hanningrb.Checked = true then
      begin
        prosesifft(jmldataecg,re2,im2,fsecg);
      end;

      if hammingrb.Checked = true then
      begin
        prosesifft(jmldataecg,re2,im2,fsecg);
      end;

      if nowindowrb.Checked = true then
      begin
        prosesifft(jmldataecg,re2,im2,fsecg);
      end;
    end;
  end;
end;

//HEAR RATE BPM
procedure TForm1.Button5Click(Sender: TObject);
begin
  k:= 0;
   for i := 0 to jmldataecg-1 do
   begin
     if (outp[i]=0) and (outp[i+1]=1) then
     begin
       for j := i to jmldataecg-1 do
       begin
         if (outp[j]= 0) and (outp[j+1]=1) then
         begin
           inc(k);
           break;
         end;
       end;
     end;
   end;

   bpm:= 0;

   bpm:= round(60/(jmldataecg/fsecg)*(k));
   edit6.Text:= floattostr(bpm);
   edit5.Text:= inttostr(k);
end;

procedure TForm1.Button6Click(Sender: TObject);
begin
  form2.visible := True;
end;

procedure TForm1.Button7Click(Sender: TObject);
begin
  form3.visible := true;
end;

//FILTER ECG PANTOMKINS
procedure TForm1.filterecg(x: arraybaru);
var
  hitungRPeak : integer;
begin
  series2.Clear;
  series3.Clear;
  series4.Clear;
  series5.Clear;
  series6.Clear;
  listbox1.Clear;

    for i := -1000 to 0 do
    begin
      outlpf[i] := 0;
      x[i] := 0;
    end;

    //LANGKAH PERTAMA LPF
    for i := 1 to jmldataecg do
      begin
        outlpf[i] := (2*outlpf[i-1])-outlpf[i-2] + x[i] - 2*x[i-6] + x[i-12];
        series2.AddXY(i,outlpf[i]);
      end;
    //LANGKAH KEDUA HPF
    for i := 1 to jmldataecg do
      begin
        outhpf[i]:= outhpf[i-1]-(outlpf[i]/32)+outlpf[i-16]-outlpf[i-17]+(outlpf[i-32]/32);
        series3.AddXY(i, outhpf[i]);
      end;
    //LANGKAH KETIGA DERIVATIVE
    for i := 1 to jmldataecg do
      begin
        outddt[i]:= (2*outhpf[i] + outhpf[i-1])- outhpf[i-3]-(2*outhpf[i-4]/8);
        series4.AddXY(i, outddt[i]);
      end;
    //LANGKAH KEEMPAT SQUARE
    for i := 1 to jmldataecg do
      begin
        outsqr[i]:= sqr(outddt[i]);
        series5.AddXY(i, outsqr[i]);
      end;

  series2.Title := 'LPF';
  series3.Title := 'HPF';
  series4.Title := 'Derivative';
  series5.Title := 'Square';

  //MAV FILTER
  ordemav := 32;
  for i := 1 to jmldataecg do   //BACKWARD
    begin
      for j:= 1 to ordemav do
       begin
         y1[i]:= y1[i] + outsqr[i-j];
       end;
       ybackward[i]:= y1[i]/ordemav;
    end;

  for i := 1 to jmldataecg do   //FORWARD
    begin
      for j := 1 to ordemav do
        begin
          y2[i] := y2[i] + ybackward[i+j];
        end;
        yforward[i] := y2[i] /ordemav;
        series6.AddXY(i,yforward[i]);
    end;

    series6.Title := 'MAV';

    max := yforward[0];
    listbox1.Items.Add('Threshold :');
    for i := 1 to jmldataecg do
      begin
        if yforward[i] >= max then  //Comparing
          max := yforward[i];
        listbox1.Items.Add('th['+ inttostr(i)+'] = ' + floattostr(th[i]));
      end;

    maxn := 0.015;
    for i:=0 to jmldataecg-1 do begin
      lp[i]:=0.98*lp[i-1]+(1-0.98)*max;
      ln[i]:=0.98*ln[i-1]+(1-0.98)*maxn;
      th[i]:=ln[i]+0.4*(lp[i]-ln[i]);
    end;

    for i:=0 to jmldataecg-1 do begin
      if yforward[i]>th[i] then outp[i]:=1 else outp[i]:=0;
      if (outp[i]=0) AND (outp[i+1] = 1) then
          begin
            rpeakchart.AddXY(i, x[i+1]);
          end;
          series7.AddXY(i,outp[i]);
    end;
    series8.Title:= 'R peak';
end;

//INPUT ECG FILE
procedure TForm1.inputecg(nm_file: string);
var
  temp1 : string;
  temp2 : string;
  i : integer;
begin
  s1 := tstringlist.Create;
  i := 0;
  assignfile(filename, nm_file);
  reset(filename);
  readln(filename, temp1);
  s1.Delimiter := '(';
  readln(filename, temp2);
  s1.DelimitedText := temp2;
  t := strtofloat(s1[1]);
  while not eof(filename) do
    begin
      readln(filename,sampleecg[i], xecg[i]);
      readln(filename,sampleecg[i], xecgfilter[i]);
      inc(i);
    end;
  jmldataecg := i;
  fsecg := 1/t;
  edit3.Text := inttostr(jmldataecg);
  edit4.Text := floattostr(fsecg);
end;

//INPUT SINUS
procedure TForm1.inputsinus;
begin
  amp := strtofloat(edit1.Text);
  freq := strtofloat(edit2.Text);
  jmldata := strtoint(edit3.Text);
  fssinus := strtofloat(edit4.Text);

  for i := 0 to jmldata-1 do
    begin
      xsin[i] := amp*sin(2*pi*freq*i/fssinus);
      series1.AddXY(i,xsin[i]);
    end;
end;

//DFT LIBRARY
procedure TForm1.prosesdft(inp: vektor; data: integer; fsd: extended);
var
  index : integer;
begin
  series8.Clear;
  for i := 0 to data do
    begin
      mag[i]:= 0;
      re[i]:= 0;
      im[i]:= 0;
    end;

  hasildft:=dft(data,inp);

  index:= round (data div 2);

  for i := index to data do    //Normalisasi dari data/2 - data
    begin
      re[i]:=hasildft[i,1];
      im[i]:=hasildft[i,2];
      mag[i-index]:= sqrt(sqr(re[i]) + sqr(im[i]));
    end;

  for i := 0 to index do    //Normalisasi dari 0 - data/2
    begin
      re[i]:=hasildft[i,1];
      im[i]:=hasildft[i,2];
      mag[i+index]:= sqrt(sqr(re[i]) + sqr(im[i]));
    end;

  for i := 0 to data-1 do   //Magnitude dibagi index div 2
    begin
      mag[i]:= mag[i]/(index div 2);
      if i= 0 then          //Pada saat i = 0 maka magnitude dibagi 2
      begin
        mag[i]:= mag[i]/2;
      end;
    end;

    for i := -((data div 2)-1) to 0 do  //Plott Grafik DFT Ternormalisasi
    begin
      series8.AddXY(i*fsd/data, mag[i+index]/2);
    end;

    for i := 0 to ((data div 2)-1) do
    begin
      series8.AddXY(i*fsd/data, mag[i+index]/2);
    end;

end;

//FFT LIBRARY
procedure TForm1.prosesfft(inp: vektor; data: integer; fsd: extended);
var
distortion, index2 : integer;
begin
  series8.Clear;

  mag1[0]:=0;
  for i := 0 to data do //Membuat array bernilai 0 dari i ke 0 - data
    begin
      mag2[i]:= 0;
      re2[i]:= 0;
      im2[i]:= 0;
    end;

  datazp:= 1;   //Data untuk zero padding
  while (datazp<= data) do
    begin
      datazp:= datazp*2;
    end;

  for i := data to datazp-1 do  //Zero Padding
    begin
      inp[i]:= 0;
    end;

  hasilfft:=fft(1,datazp,inp,mag1);  //Proses FFT dari Library
  index2:= datazp div 2;  //Index = data/2

  for i := index2 to datazp-1 do   //Normalisasi FFT dari index - (data-1)
    begin
      re2[i]:=hasilfft[i,1];
      im2[i]:=hasilfft[i,2];
      mag2[i-index2]:= sqrt(sqr(re2[i]) + sqr(im2[i]));
    end;

   for i := 0 to index2-1 do    //Normalisasi FFT dari 0 - (index-1)
     begin
      re2[i]:=hasilfft[i,1];
      im2[i]:=hasilfft[i,2];
      mag2[i+index2]:= sqrt(sqr(re2[i]) + sqr(im2[i]));
     end;

   for i := 0 to datazp-1 do  //Penggabungan Mag
     begin
      mag2[i]:= mag2[i]/ (index2 div 2);
      if i= 0 then    // Pada saat i = 0 maka mag/2
      begin
        mag2[i]:= mag2[i]/2;
      end;
     end;

   for i := -((datazp div 2)-1) to 0 do
     begin
      series8.AddXY(i*fsd/datazp, mag2[i+index2]/2);
     end;
     for i := 0 to ((data div 2)-1) do
     begin
      series8.AddXY(i*fsd/datazp, mag2[i+index2]/2);
     end;
end;

//IDFT LIBRARY
procedure TForm1.prosesidft(data: integer; re1, im2: vektor;
  fsd: extended);
begin
  lineseries1.Clear;
  hasilidft:=invdft(data,re1,im2);  //memakai library invdft
	for i:=1 to data do
    begin
      mag[i]:=0;
      mag[i]:=hasilidft[i];
      lineseries1.addxy(i,mag[i]);
    end;
end;

//IFFT LIBRARY
procedure TForm1.prosesifft(data: integer; re1, im2: vektor;
  fsd: extended);
begin
  lineseries1.Clear;
  hasilifft:=fft(-1,data,re1,im2);  //memakai library fft tapi diubah parameter menjadi -1
   for i:=1 to data do
    begin
      mag[i]:=0;
      mag[i]:=hasilifft[i,1];
      lineseries1.addxy(i,mag[i]);
    end;

end;

//WINDOWS SCALING
procedure TForm1.ScrollBar1Change(Sender: TObject);
begin
  label6.Caption := 'Scaling ' + inttostr(scrollbar1.position);
  if manualrb.Checked = true then
    scrollbar1.Max := jmldata else
  if filerb.Checked = true then
    scrollbar1.Max := jmldataecg;

  for i := 0 to jmldata do
   begin
     cek[i]:= 0;
   end;

  if hanningrb.Checked = true then  //HANNING
   begin
    if manualrb.Checked = true then
    begin
      hanning(jmldata, cek);
    end;

    if filerb.Checked = true then
    begin
      hanning(jmldataecg, cek);
    end;

   end;

   if hammingrb.Checked = true then  //HAMMING
   begin

    if manualrb.Checked = true then
    begin
      hamming(jmldata, cek);
    end;

    if filerb.Checked = true then
    begin
      hamming(jmldataecg, cek);
    end;

   end;
  end;

//WINDOWS SHIFTING
procedure TForm1.ScrollBar2Change(Sender: TObject);
begin
  label5.Caption := 'Shifting ' + inttostr(scrollbar2.Position);
  if manualrb.Checked = True then
    scrollbar2.Max := jmldata else
  if filerb.Checked = true then
    scrollbar2.Max := jmldataecg;
  for i := 0 to jmldata do
   begin
     cek[i]:= 0;
   end;

  if hanningrb.Checked = true then  //HANNING
   begin
    if manualrb.Checked = true then
    begin
      hanning(jmldata, cek);
    end;

    if filerb.Checked = true then
    begin
      hanning(jmldataecg, cek);
    end;

   end;

   if hammingrb.Checked = true then  //HAMMING
   begin

    if manualrb.Checked = true then
    begin
      hamming(jmldata, cek);
    end;

    if filerb.Checked = true then
    begin
      hamming(jmldataecg, cek);
    end;

   end;
end;

// HAMMING WINDOW
procedure TForm1.hamming(data: integer; inp: vektor);
var
  scale2, temp2 : integer;
begin
  windowchart.Clear;

  for i := 0 to data do  //Inisialisasi array
    begin
      wham1[i]:=0;
      wham11[i]:= 0;
      wham[i]:= 0;
    end;

  sc2 := scrollbar1.Position;
  sh2 := scrollbar2.Position;
  scale2:= sc2 div 2;

  for n:= 0 to sc2 do  //Rumus Window Hammming
    begin
      wham1[n]:=(0.54-((0.46*cos(n*pi/scale2))));
    end;

  for n := 0 to data-1 do
    begin
      temp2:= (n-sh2);
      wham11[n]:= wham1[temp2];
      windowchart.AddXY(n,wham11[n]);
      wham[n]:= wham11[n] * inp[n];
    end;

end;

//HANNING WINDOW
procedure TForm1.hanning(data: integer; inp: vektor);
var
temp, scale : integer;
begin
  windowchart.Clear;

  for i := 0 to data do  //Inisialisasi array
    begin
      whan1[i]:=0;
      whan11[i]:= 0;
      whan[i]:= 0;
    end;

  sc:= scrollbar1.Position;
  sh:= scrollbar2.Position;
  scale:= sc div 2;

  for n:= 0 to sc do  //Rumus Window Hanning
  begin
     whan1[n]:=(0.5-(0.5*cos(n*pi/scale)));
  end;

  for n := 0 to data-1 do //Penggabungan Ploting Shift dan Scale
  begin
    temp:= (n-sh);  //n- nilai shifting
    whan11[n]:= whan1[temp];  //array baru untuk window tershifting
    windowchart.AddXY(n,whan11[n]); //Plot shifting
    whan[n]:= whan11[n] * inp[n];
  end;

end;

end.
